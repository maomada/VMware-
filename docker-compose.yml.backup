# VMware IaaS Platform - Docker Compose配置
# 版本: 2.0 - 容器化部署

version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: vmware-iaas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vmware_iaas
      POSTGRES_USER: iaas_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - iaas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iaas_user -d vmware_iaas"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: vmware-iaas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - iaas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VMware IaaS主应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    image: vmware-iaas:latest
    container_name: vmware-iaas-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Flask配置
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      
      # 数据库配置
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: vmware_iaas
      DB_USER: iaas_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_123}
      
      # LDAP配置
      LDAP_SERVER: ${LDAP_SERVER:-ldap://your-ldap-server.com:389}
      LDAP_BASE_DN: ${LDAP_BASE_DN:-dc=company,dc=com}
      LDAP_USER_DN_TEMPLATE: ${LDAP_USER_DN_TEMPLATE:-uid={username},ou=users,dc=company,dc=com}
      LDAP_ADMIN_DN: ${LDAP_ADMIN_DN:-cn=admin,dc=company,dc=com}
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD:-your_ldap_password}
      
      # VMware配置
      VCENTER_HOST: ${VCENTER_HOST:-your-vcenter-server.com}
      VCENTER_USER: ${VCENTER_USER:-administrator@vsphere.local}
      VCENTER_PASSWORD: ${VCENTER_PASSWORD:-your_vcenter_password}
      
      # 邮件配置
      SMTP_SERVER: ${SMTP_SERVER:-smtp.company.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-iaas-system@company.com}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-your_smtp_password}
      SMTP_FROM: ${SMTP_FROM:-VMware IaaS Platform <iaas-system@company.com>}
      
      # 网络配置
      NETWORK_SEGMENT_1: ${NETWORK_SEGMENT_1:-192.168.100.0/24}
      NETWORK_SEGMENT_2: ${NETWORK_SEGMENT_2:-192.168.101.0/24}
      NETWORK_SEGMENT_3: ${NETWORK_SEGMENT_3:-192.168.102.0/24}
      
      # 价格配置
      PRICE_CPU: ${PRICE_CPU:-0.08}
      PRICE_MEMORY: ${PRICE_MEMORY:-0.16}
      PRICE_DISK: ${PRICE_DISK:-0.5}
      PRICE_GPU_3090: ${PRICE_GPU_3090:-11.0}
      PRICE_GPU_T4: ${PRICE_GPU_T4:-5.0}
      
      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - app_logs:/app/logs
      - app_backups:/app/backups
      # 如果需要访问宿主机网络（用于ping检测）
      - /etc/hosts:/etc/hosts:ro
    ports:
      - "127.0.0.1:5000:5000"
    networks:
      - iaas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: vmware-iaas-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/usr/share/nginx/html/static:ro
      - nginx_logs:/var/log/nginx
      # SSL证书目录（如果有）
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - iaas-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 定时任务服务（可选）
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.scheduler
    image: vmware-iaas-scheduler:latest
    container_name: vmware-iaas-scheduler
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # 继承app服务的环境变量
      <<: *app-environment
    volumes:
      - app_logs:/app/logs
      - scheduler_logs:/app/scheduler_logs
    networks:
      - iaas-network

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: vmware-iaas-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - iaas-network

  # Grafana监控面板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: vmware-iaas-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - iaas-network

# 网络配置
networks:
  iaas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_backups:
    driver: local
  nginx_logs:
    driver: local
  scheduler_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 环境变量模板
x-app-environment: &app-environment
  FLASK_ENV: production
  SECRET_KEY: ${SECRET_KEY:-your-super-secret-key}
  DB_HOST: postgres
  DB_PORT: 5432
  DB_NAME: vmware_iaas
  DB_USER: iaas_user
  DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
